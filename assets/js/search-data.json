{
  
    
        "post0": {
            "title": "CollegeBoard Revisions/Reflection",
            "content": "College Board MCQ Corrections. . Question: #5 . The correct answer to this problem would be A: ( a &amp;&amp; b ) &amp;&amp; ( !c &amp;&amp; d ). . Question: #12 . The correct answer to this problem would be A: (y &gt; 10000 | | x &gt; 1000) &amp;&amp; (y &gt; 10000 | | x &lt; 1500) because the original expression evaluates to true when either y is greater than 10000 or x is between 1000 and 1500. . Question: #18 . The correct answer to this problem would be E becausethe original expression prints &quot;dog&quot; when a &lt; b || c != d evaluates to true, an equivalent code segment would print &quot;cat&quot; when the negative of the expression, or !(a &lt; b || c != d), evaluates to true. . Question: #19 . The correct answer to this problem would be A; because of De Morgan&#39;s laws, the given expression is equivalent to (a &lt; b) || (c &lt; d). . Question: #23 . The correct answer to this problem would be B, because the last array element is at index arr.length - 1, so the loop should only iterate while j &lt; arr.length. .",
            "url": "https://guapbeast.github.io/Trimester-1-Fast-Pages/jupyter/2023/01/21/CollegeBoardorrections.html",
            "relUrl": "/jupyter/2023/01/21/CollegeBoardorrections.html",
            "date": " • Jan 21, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "Unit 9 Inheritance",
            "content": "Notes . The keyword &quot;Super&quot; is used to call a subclass. . Overriding methods (@Override) is used to give different implementations to the method of the superclass . Subclasses and Superclasses are usually organized into a single root tree caled a hierarchy . One example includes: the Class leaf extends nature, so leaf is a subclass of nature. . public class Team { public int score; public int wins; public int all_goals; public Team( int score, int wins, int all_goals) { this.score = score; this.wins = wins; this.all_goals = all_goals; } public void score() { this.score += 1; } public void bestplayer() { System.out.println(&quot;Best player: Unknown&quot;); } public void out() { System.out.println(&quot;Team score: &quot; + this.score); System.out.println(&quot;Team wins: &quot; + this.wins); System.out.println(&quot;Team all goals: &quot; + this.all_goals); bestplayer(); } } public class Portugal extends Team { public Portugal(int score, int wins, int all_goals) { super(score, wins, all_goals); } public void score() { this.score += 1; } public void bestplayer() { System.out.println(&quot;Best player: Cristiano Ronaldo&quot;); } } public class France extends Team { public France(int score, int wins, int all_goals) { super(score, wins, all_goals); } public void score() { this.score += 1; } public void bestplayer() { System.out.println(&quot;Best player: Kylian Mbappe&quot;); } } Team team = new Team(0, 1, 27); Team portugal = new Portugal(0, 2, 55); Team france = new France(0, 2, 129); team.out(); portugal.out(); france.out(); . Team score: 0 Team wins: 1 Team all goals: 27 Best player: Unknown Team score: 0 Team wins: 2 Team all goals: 55 Best player: Cristiano Ronaldo Team score: 0 Team wins: 2 Team all goals: 129 Best player: Kylian Mbappe . public class Person { protected String name; protected String birthday; public Person (String name, String birthday){ this.name = name; this.birthday = birthday; } public String getName(){ return name; } public int getAge() { return 2022 - Integer.parseInt(birthday); } @Override public String toString() { return &quot;Person (name: &quot; + name + &quot;, birthday: &quot; + birthday + &quot;)&quot;; } } //Student is a subclass and extends person, the superclass, since students are classified as a person. public class Student extends Person { private int grade; private double gpa; private String extracurricular; public Student (String name, String birthday, int grade, double gpa, String extracurricular) { super(name, birthday); this.grade = grade; this.gpa = gpa; this.extracurricular = extracurricular; } // return gpa public double getGPA() { return gpa; } public String extracurricular() { return extracurricular; } // return grade public int getGrade(){ return grade; } @Override public String toString() { return &quot;Student (name: &quot; + name + &quot;, birthday: &quot; + birthday + &quot;, extracurricular: &quot; + extracurricular + &quot;, gpa:&quot; + gpa + &quot;, grade: &quot; + grade + &quot;)&quot;; } } // The public class teacher is a subclass of person and as such will extend person, the superclass. public class Teacher extends Person { private String subject; private int tenureYears; private String degree; public Teacher (String name, String birthday, String subject, int tenureYears, String degree) { super(name, birthday); this.subject = subject; this.tenureYears = tenureYears; this.degree = degree; } // return subject public String getSubject() { return subject; } // return yearsOfExperience public int getTenure() { return tenureYears; } // return degree public String getDegree() { return degree; } @Override public String toString() { return &quot;Teacher (name: &quot; + name + &quot;, birthday: &quot; + birthday + &quot;, subject: &quot; + subject + &quot;, tenureYears:&quot; + tenureYears + &quot;, degree: &quot; + degree + &quot;)&quot;; } } Person aidan = new Person(&quot;aidan&quot;, &quot;2006&quot;); System.out.println(aidan.toString()); Person jun = new Student(&quot;jun&quot;, &quot;2005&quot;, 12, 3.5, &quot;football&quot;); System.out.println(jun.toString()); Person allie = new Teacher(&quot;allie&quot;, &quot;1980&quot;, &quot;math&quot;, 10, &quot;N/A&quot;); System.out.println(allie.toString()); . Person (name: aidan, birthday: 2006) Student (name: jun, birthday: 2005, extracurricular: football, gpa:3.5, grade: 12) Teacher (name: allie, birthday: 1980, subject: math, tenureYears:10, degree: N/A) .",
            "url": "https://guapbeast.github.io/Trimester-1-Fast-Pages/jupyter/2022/12/07/unit9.html",
            "relUrl": "/jupyter/2022/12/07/unit9.html",
            "date": " • Dec 7, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "2019 FRQ",
            "content": "import java.lang.Math; import java.util.HashMap; import java.util.Map; public class Light { boolean on; short red; short green; short blue; short effect; /* ANSI effects n Name Note 0 Reset or normal All attributes off 1 Bold or increased intensity As with faint, the color change is a PC (SCO / CGA) invention.[38][better source needed] 2 Faint, decreased intensity, or dim May be implemented as a light font weight like bold.[39] 3 Italic Not widely supported. Sometimes treated as inverse or blink.[38] 4 Underline Style extensions exist for Kitty, VTE, mintty and iTerm2.[40][41] 5 Slow blink Sets blinking to less than 150 times per minute 6 Rapid blink MS-DOS ANSI.SYS, 150+ per minute; not widely supported 7 Reverse video or invert Swap foreground and background colors; inconsistent emulation[42] 8 Conceal or hide Not widely supported. 9 Crossed-out, or strike Characters legible but marked as if for deletion. Not supported in Terminal.app */ private final Map&lt;Short, String&gt; EFFECT = new HashMap&lt;&gt;(); { // Map&lt;&quot;separator&quot;, not_used&gt; EFFECT.put((short) 0, &quot;Normal&quot;); EFFECT.put((short) 1, &quot;Bold&quot;); EFFECT.put((short) 2, &quot;Faint&quot;); EFFECT.put((short) 3, &quot;Italic&quot;); EFFECT.put((short) 4, &quot;Underline&quot;); EFFECT.put((short) 5, &quot;Slow Blink&quot;); EFFECT.put((short) 6, &quot;Fast Blink&quot;); EFFECT.put((short) 7, &quot;Reverse&quot;); EFFECT.put((short) 8, &quot;Conceal&quot;); EFFECT.put((short) 9, &quot;Crossed_out&quot;); } /* Assign random colors and effects */ public Light() { int maxColor = 255; int effect = 9; this.red = (short) (Math.random()*(maxColor+1)); this.green = (short) (Math.random()*(maxColor+1)); this.blue = (short) (Math.random()*(maxColor+1)); this.effect = (short) (Math.random()*(effect+1)); } public String getEffectTitle() { return EFFECT.get(this.effect); } public String getRGB() { return ( &quot;#&quot; + String.format(&quot;%02X&quot;, this.red) + String.format(&quot;%02X&quot;, this.green) + String.format(&quot;%02X&quot;, this.blue) ); } /* toString output as key/values */ public String toString() { return( &quot;{&quot; + &quot; &quot;red &quot;: &quot; + red + &quot;,&quot; + &quot; &quot;green &quot;: &quot; + green + &quot;,&quot; + &quot; &quot;blue &quot;: &quot; + blue + &quot;,&quot; + &quot; &quot;effect &quot;: &quot; + &quot; &quot;&quot; + EFFECT.get(effect) + &quot; &quot;&quot; + &quot;}&quot; ); } public boolean isOn() { return on; } public void setOn(boolean on) { this.on = on; } public short getRed() { return red; } public short getGreen() { return green; } public short getBlue() { return blue; } public short getEffect() { return effect; } static public void main(String[] args) { // create and display LightBoard Light light = new Light(); System.out.println(light); // use toString() method } } Light.main(null); public class LightBoard { private Light[][] lights; /* Initialize LightBoard and Lights */ public LightBoard(int numRows, int numCols) { this.lights = new Light[numRows][numCols]; // 2D array nested loops, used for initialization for (int row = 0; row &lt; numRows; row++) { for (int col = 0; col &lt; numCols; col++) { lights[row][col] = new Light(); // each cell needs to be constructed } } } /* Output is intended for API key/values */ public String toString() { String outString = &quot;[&quot;; // 2D array nested loops, used for reference for (int row = 0; row &lt; lights.length; row++) { for (int col = 0; col &lt; lights[row].length; col++) { outString += // data &quot;{&quot; + &quot; &quot;row &quot;: &quot; + row + &quot;,&quot; + &quot; &quot;column &quot;: &quot; + col + &quot;,&quot; + &quot; &quot;light &quot;: &quot; + lights[row][col] + // extract toString data &quot;},&quot; ; } } // remove last comma, newline, add square bracket, reset color outString = outString.substring(0,outString.length() - 1) + &quot;]&quot;; return outString; } /* Output is intended for Terminal, effects added to output */ public String toTerminal() { String outString = &quot;[&quot;; // 2D array nested loops, used for reference for (int row = 0; row &lt; lights.length; row++) { for (int col = 0; col &lt; lights[row].length; col++) { outString += // reset &quot; 033[m&quot; + // color &quot; 033[38;2;&quot; + lights[row][col].getRed() + &quot;;&quot; + // set color using getters lights[row][col].getGreen() + &quot;;&quot; + lights[row][col].getBlue() + &quot;;&quot; + lights[row][col].getEffect() + &quot;m&quot; + // data, extract custom getters &quot;{&quot; + &quot; &quot;&quot; + &quot;RGB &quot;: &quot; + &quot; &quot;&quot; + lights[row][col].getRGB() + &quot; &quot;&quot; + &quot;,&quot; + &quot; &quot;&quot; + &quot;Effect &quot;: &quot; + &quot; &quot;&quot; + lights[row][col].getEffectTitle() + &quot; &quot;&quot; + &quot;},&quot; + // newline &quot; n&quot; ; } } // remove last comma, newline, add square bracket, reset color outString = outString.substring(0,outString.length() - 2) + &quot; 033[m&quot; + &quot;]&quot;; return outString; } /* Output is intended for Terminal, draws color palette */ public String toColorPalette() { // block sizes final int ROWS = 5; final int COLS = 10; // Build large string for entire color palette String outString = &quot;&quot;; // find each row for (int row = 0; row &lt; lights.length; row++) { // repeat each row for block size for (int i = 0; i &lt; ROWS; i++) { // find each column for (int col = 0; col &lt; lights[row].length; col++) { // repeat each column for block size for (int j = 0; j &lt; COLS; j++) { // print single character, except at midpoint print color code String c = (i == (int) (ROWS / 2) &amp;&amp; j == (int) (COLS / 2) ) ? lights[row][col].getRGB() : (j == (int) (COLS / 2)) // nested ternary ? &quot; &quot;.repeat(lights[row][col].getRGB().length()) : &quot; &quot;; outString += // reset &quot; 033[m&quot; + // color &quot; 033[38;2;&quot; + lights[row][col].getRed() + &quot;;&quot; + lights[row][col].getGreen() + &quot;;&quot; + lights[row][col].getBlue() + &quot;;&quot; + &quot;7m&quot; + // color code or blank character c + // reset &quot; 033[m&quot;; } } outString += &quot; n&quot;; } } // remove last comma, newline, add square bracket, reset color outString += &quot; 033[m&quot;; return outString; } static public void main(String[] args) { // create and display LightBoard LightBoard lightBoard = new LightBoard(5, 5); System.out.println(lightBoard); // use toString() method System.out.println(lightBoard.toTerminal()); System.out.println(lightBoard.toColorPalette()); } } public class LightBoard { /** The lights on the board, where true represents on and false represents off. */ private boolean[][] lights; /** Constructs a LightBoard object having numRows rows and numCols columns. * Precondition: numRows &gt; 0, numCols &gt; 0 * Postcondition: each light has a 40% probability of being set to on. */ public LightBoard(int numRows, int numCols){ /* to be implemented in part (a) */ // initialize the 2D array lights = new boolean[numRows][numCols]; // Using two enhanced for loops to iterate through the 2D array for (int i = 0; i &lt; lights.length; i++) { for (int j = 0; j &lt; lights[i].length; j++){ // use math.random to generate a random number, less than 0.4, to determine if the light is on or off if (Math.random() &lt; 0.4){ lights[i][j] = true; } else{ lights[i][j] = false; } } } } /** Evaluates a light in row index row and column index col and returns a status * as described in part (b). * Precondition: row and col are valid indexes in lights. */ public boolean evaluateLight(int row, int col) { /* to be implemented in part (b) */ // CHECK IF LIGHT IS ON if (lights[row][col] == true) { // return false if the number of lights in its column are even int counter = 0; // iterate through every row and check for value of the column, if true increment counter for (int i = 0; i &lt; lights.length; i++){ if (lights[i][col] == true){ counter++; } } // check if counter is even or odd if (counter % 2 == 0){ return false; } else{ return true; } } // If light is off else { int counter = 0; // Count number of lights in the column for (int i = 0; i &lt; lights.length; i++){ if (lights[i][col] == true){ counter++; } } // return true if the number of lights in the column is divisible by 3 if (counter % 3 == 0) { return true; } else { return false; } } } // There may be additional instance variables, constructors, and methods not shown. } LightBoard lightBoard = new LightBoard(5, 5); System.out.println(lightBoard); // use toString() method LightBoard a = new LightBoard(5,5); System.out.println(a.evaluateLight(0,0)); System.out.println(a.evaluateLight(0,1)); System.out.println(a.evaluateLight(0,2)); . {&#34;red&#34;: 249,&#34;green&#34;: 24,&#34;blue&#34;: 154,&#34;effect&#34;: &#34;Italic&#34;} REPL.$JShell$13BI$LightBoard@24412e0d false false true .",
            "url": "https://guapbeast.github.io/Trimester-1-Fast-Pages/jupyter/2022/12/07/FRQ4.html",
            "relUrl": "/jupyter/2022/12/07/FRQ4.html",
            "date": " • Dec 7, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "2019 FRQ",
            "content": "import java.util.ArrayList; import java.util.HashMap; import java.util.Map; import java.util.Stack; import java.lang.Math; import java.lang.Double; public class Operator { // Key instance variables private String expression; private Double result = 0.0; private ArrayList&lt;String&gt; tokens; private ArrayList&lt;String&gt; reverse_polish; // Helper definition for supported operators private final Map&lt;String, Integer&gt; OPERATORS = new HashMap&lt;&gt;(); { // Map&lt;&quot;token&quot;, precedence&gt; OPERATORS.put(&quot;POW&quot;, 1); OPERATORS.put(&quot;RT&quot;, 2); OPERATORS.put(&quot;^&quot;, 2); OPERATORS.put(&quot;*&quot;, 3); OPERATORS.put(&quot;/&quot;, 3); OPERATORS.put(&quot;%&quot;, 3); OPERATORS.put(&quot;+&quot;, 4); OPERATORS.put(&quot;-&quot;, 4); } // Helper definition for supported operators private final Map&lt;String, Integer&gt; SEPARATORS = new HashMap&lt;&gt;(); { // Map&lt;&quot;separator&quot;, not_used&gt; SEPARATORS.put(&quot; &quot;, 0); SEPARATORS.put(&quot;(&quot;, 0); SEPARATORS.put(&quot;)&quot;, 0); } // Create a 1 argument constructor expecting a mathematical expression public Operator(String expression) { // original input this.expression = expression; // parse expression into terms this.termTokenizer(); // place terms into reverse polish notation this.tokensToReversePolishNotation(); // calculate reverse polish notation this.rpnToResult(); } // Test if token is an operator private boolean isOperator(String token) { // find the token in the hash map return OPERATORS.containsKey(token); } // Test if token is an separator private boolean isSeparator(String token) { // find the token in the hash map return SEPARATORS.containsKey(token); } // Compare precedence of operators. private Boolean isPrecedent(String token1, String token2) { // token 1 is precedent if it is greater than token 2 return (OPERATORS.get(token1) - OPERATORS.get(token2) &gt;= 0) ; } // Term Tokenizer takes original expression and converts it to ArrayList of tokens private void termTokenizer() { // contains final list of tokens this.tokens = new ArrayList&lt;&gt;(); int start = 0; // term split starting index StringBuilder multiCharTerm = new StringBuilder(); // term holder for (int i = 0; i &lt; this.expression.length(); i++) { Character c = this.expression.charAt(i); if ( isOperator(c.toString() ) || isSeparator(c.toString()) ) { // 1st check for working term and add if it exists if (multiCharTerm.length() &gt; 0) { tokens.add(this.expression.substring(start, i)); } // Add operator or parenthesis term to list if (c != &#39; &#39;) { tokens.add(c.toString()); } // Get ready for next term start = i + 1; multiCharTerm = new StringBuilder(); } else { // multi character terms: numbers, functions, perhaps non-supported elements // Add next character to working term multiCharTerm.append(c); } } // Add last term if (multiCharTerm.length() &gt; 0) { tokens.add(this.expression.substring(start)); } } // Takes tokens and converts to Reverse Polish Notation (RPN), this is one where the operator follows its operands. private void tokensToReversePolishNotation () { // contains final list of tokens in RPN this.reverse_polish = new ArrayList&lt;&gt;(); // stack is used to reorder for appropriate grouping and precedence Stack&lt;String&gt; tokenStack = new Stack&lt;String&gt;(); for (String token : tokens) { switch (token) { // If left bracket push token on to stack case &quot;(&quot;: tokenStack.push(token); break; case &quot;)&quot;: while (tokenStack.peek() != null &amp;&amp; !tokenStack.peek().equals(&quot;(&quot;)) { reverse_polish.add( tokenStack.pop() ); } tokenStack.pop(); break; case &quot;RT&quot;: case &quot;+&quot;: case &quot;-&quot;: case &quot;*&quot;: case &quot;/&quot;: case &quot;%&quot;: case &quot;^&quot;: case &quot;POW&quot;: // While stack // not empty AND stack top element // and is an operator while (tokenStack.size() &gt; 0 &amp;&amp; isOperator(tokenStack.peek())) { if ( isPrecedent(token, tokenStack.peek() )) { reverse_polish.add(tokenStack.pop()); continue; } break; } // Push the new operator on the stack tokenStack.push(token); break; case &quot;lbs&quot;: case &quot;LBS&quot;: case &quot;Lbs&quot;: // recognize pi variable and replace that token with it this.reverse_polish.add(&quot;2.2&quot;); break; case &quot;cm&quot;: case &quot;Cm&quot;: case &quot;CM&quot;: this.reverse_polish.add(&quot;2.54&quot;); break; default: try { Double.parseDouble(token); } catch(NumberFormatException e) { // Resolve variable to 0 in order for the rest of the function to successfully run. this.reverse_polish.add(&quot;0&quot;); this.expression = &quot;Error with parsing your expression &#39;&quot; + this.expression + &quot; &#39;. Please enter valid numbers, operators, or variables and try again.&quot;; break; } this.reverse_polish.add(token); } } // Empty remaining tokens while (tokenStack.size() &gt; 0) { reverse_polish.add(tokenStack.pop()); } } // Takes RPN and produces a final result private void rpnToResult() { // stack is used to hold operands and each calculation Stack&lt;Double&gt; calcStack = new Stack&lt;Double&gt;(); // RPN is processed, ultimately calcStack has final result for (String token : this.reverse_polish) { // If the token is an operator, calculate if (isOperator(token)) { // Pop the top two entries double a = calcStack.pop(); double b = calcStack.pop(); // Calculate intermediate results switch (token) { // b goes first, as it is popped second and must be on the left to make the equation work case &quot;RT&quot;: // rt is the only exception as the first value is the value of the root being done to the second value result = Math.pow(a, (1/b)); break; case &quot;+&quot;: result = b + a; break; case &quot;-&quot;: result = b - a; break; case &quot;*&quot;: result = b * a; break; case &quot;/&quot;: result = b / a; break; case &quot;%&quot;: result = b % a; break; case &quot;^&quot;: case &quot;POW&quot;: result = Math.pow(b,a); break; default: break; } // Pop the two top entries // Push intermediate result back onto the stack calcStack.push( result ); } // else the token is a number push it onto the stack else { calcStack.push(Double.valueOf(token)); } } // Pop final result and set as final result for expression this.result = calcStack.pop(); } public String calcToString(boolean x) { if (x) { System.out.println(&quot;&quot;); System.out.println(&quot;Result: &quot; + this.expression + &quot; = &quot; + this.result); System.out.println(&quot;Tokens: &quot; + this.tokens + &quot; , RPN: &quot; + this.reverse_polish); } String output = this.expression + &quot; = &quot; + this.result; return output; } public String jsonify() { String json = &quot;{ &quot;Expression &quot;: &quot;&quot; + this.expression + &quot; &quot;, &quot;Tokens &quot;: &quot;&quot; + this.tokens + &quot; &quot;, &quot;RPN &quot;: &quot;&quot; + this.reverse_polish + &quot; &quot;, &quot;Result &quot;: &quot; + this.result + &quot; }&quot;; return json; } } // Testing different outputs String result = &quot; &quot;; // Should print 8 Operator aa = new Operator(&quot;2 * 7 + 4&quot;); result = aa.calcToString(true); // Operator bb = new Operator(&quot;2 * ( 2 + 4 )&quot;); // result = bb.calcToString(true); // Should print 2. Operator cc = new Operator(&quot;( 6 + 19 ) / 3&quot;); result = cc.calcToString(true); // Should print 14 Operator dd = new Operator(&quot;15 % 5 * 7&quot;); result = dd.calcToString(true); // EXPONENTS Operator ee = new Operator(&quot;3 + 5 ^ 2&quot;); result = ee.calcToString(true); // ROOT FUNCTION Operator ff = new Operator(&quot;3 + 7 RT 100&quot;); result = ff.calcToString(true); // ROOT FUNCTION WITH PARENTHESES Operator gg = new Operator(&quot;2 RT ( 3 + 6 +16 )&quot;); result = gg.calcToString(true); Operator hh = new Operator(&quot;lbs * 1&quot;); result = hh.calcToString(true); Operator hh = new Operator(&quot;lbs * 60&quot;); result = hh.calcToString(true); Operator ii = new Operator(&quot;cm * 2&quot;); result = ii.calcToString(true); Operator ii = new Operator(&quot;cm * 1&quot;); result = ii.calcToString(true); . Result: 2 * 7 + 4 = 18.0 Tokens: [2, *, 7, +, 4] , RPN: [2, 7, *, 4, +] Result: ( 6 + 19 ) / 3 = 8.333333333333334 Tokens: [(, 6, +, 19, ), /, 3] , RPN: [6, 19, +, 3, /] Result: 15 % 5 * 7 = 0.0 Tokens: [15, %, 5, *, 7] , RPN: [15, 5, %, 7, *] Result: 3 + 5 ^ 2 = 28.0 Tokens: [3, +, 5, ^, 2] , RPN: [3, 5, 2, ^, +] Result: 3 + 7 RT 100 = 4.93069772888325 Tokens: [3, +, 7, RT, 100] , RPN: [3, 7, 100, RT, +] Result: 2 RT ( 3 + 6 +16 ) = 5.0 Tokens: [2, RT, (, 3, +, 6, +, 16, )] , RPN: [2, 3, 6, +, 16, +, RT] Result: lbs * 1 = 2.2 Tokens: [lbs, *, 1] , RPN: [2.2, 1, *] Result: lbs * 60 = 132.0 Tokens: [lbs, *, 60] , RPN: [2.2, 60, *] Result: cm * 2 = 5.08 Tokens: [cm, *, 2] , RPN: [2.54, 2, *] Result: cm * 1 = 2.54 Tokens: [cm, *, 1] , RPN: [2.54, 1, *] .",
            "url": "https://guapbeast.github.io/Trimester-1-Fast-Pages/jupyter/2022/11/29/FRQ3.html",
            "relUrl": "/jupyter/2022/11/29/FRQ3.html",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "2019 FRQ",
            "content": "public class WordMatch { private String secret; public WordMatch (String word) { this.secret = word; } public int scoreGuess (String guess) { String word_copy = secret; int score = 0; for (int i = 0; i&lt;secret.length(); i++) { if (word_copy.indexOf(guess) == 0) score++; word_copy = word_copy.substring(1, word_copy.length()); } return score*guess.length()*guess.length(); } public static void main (String[] args) { WordMatch game1 = new WordMatch(&quot;mespoptamia&quot;); System.out.println(game1.scoreGuess(&quot;m&quot;)); System.out.println(game1.scoreGuess(&quot;eso&quot;)); System.out.println(game1.scoreGuess(&quot;pot&quot;)); System.out.println(game1.scoreGuess(&quot;amia&quot;)); System.out.println(); WordMatch game2 = new WordMatch(&quot;spiderman&quot;); System.out.println(game2.scoreGuess(&quot;s&quot;)); System.out.println(game2.scoreGuess(&quot;pi&quot;)); System.out.println(game2.scoreGuess(&quot;der&quot;)); System.out.println(game2.scoreGuess(&quot;man&quot;)); } } WordMatch.main(null); . 2 0 0 16 1 4 9 9 . public class WordMatch { private String secret; public WordMatch (String word) { this.secret = word; } public int scoreGuess (String guess) { String word_copy = secret; int score = 0; for (int i = 0; i&lt;secret.length(); i++) { if (word_copy.indexOf(guess) == 0) score++; word_copy = word_copy.substring(1, word_copy.length()); } return score*guess.length()*guess.length(); } public String findBetterGuess (String guess1, String guess2) { int score1 = scoreGuess(guess1); int score2 = scoreGuess(guess2); if (score1 &gt; score2) return guess1; if (score1 &lt; score2) return guess2; return (guess1.compareTo(guess2) &gt; 0 ? guess1 : guess2); } public static void main (String[] args) { WordMatch game1 = new WordMatch(&quot;concatenation&quot;); System.out.println(game1.findBetterGuess(&quot;Elon&quot;, &quot;Jeff&quot;)); System.out.println(game1.findBetterGuess(&quot;King Tut&quot;, &quot;Cleopatra&quot;)); } } WordMatch.main(null); . Jeff King Tut .",
            "url": "https://guapbeast.github.io/Trimester-1-Fast-Pages/jupyter/2022/11/19/Iteration-copy.html",
            "relUrl": "/jupyter/2022/11/19/Iteration-copy.html",
            "date": " • Nov 19, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "2019 FRQ",
            "content": "public static int numberOfLeapYears(int year1, int year2) { int count = 0; for (int year = year1; year &lt;= year2; year++) { if (isLeapYear(year)) { count++; } } return count; } . public static int dayOfWeek(int month, int day, int year) { return (firstDayOfYear(year) + dayOfYear(month, day, year) - 1) % 7; } .",
            "url": "https://guapbeast.github.io/Trimester-1-Fast-Pages/jupyter/2022/11/16/2019FRQ1.html",
            "relUrl": "/jupyter/2022/11/16/2019FRQ1.html",
            "date": " • Nov 16, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "2019 FRQ",
            "content": "public class StepTracker { private int activeDaysCount = 0; private int totalDays = 0; private int totalSteps = 0; private int minSteps; public StepTracker(int steps) { minSteps = steps; } public void addDailySteps(int steps) { if (steps &gt;= minSteps) { activeDaysCount++; } totalDays++; totalSteps += steps; } public int activeDays() { return activeDaysCount; } public double averageSteps() { if (totalDays == 0) { return 0.0; } return (double) totalSteps / totalDays; } } .",
            "url": "https://guapbeast.github.io/Trimester-1-Fast-Pages/jupyter/2022/11/16/2019-reflect.html",
            "relUrl": "/jupyter/2022/11/16/2019-reflect.html",
            "date": " • Nov 16, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Trimester Reflection",
            "content": "Trimester Reflection . This trimester has been a great learning experience for me and I think that I&#39;ve grown a lot as a developer, as well as a team member because of the challenges that I overcame. Working through the assignments and PBL for the trimester helped me to develop my skills in frontend, backend coding with java, as well as deployment (after all of the deployment struggles that we faced at the beginning of the trimester). Next trimester, I hope to continue to grow as a developer and continue to learn more about java, so I can implement my skills in the future. .",
            "url": "https://guapbeast.github.io/Trimester-1-Fast-Pages/jupyter/2022/11/07/Reflection.html",
            "relUrl": "/jupyter/2022/11/07/Reflection.html",
            "date": " • Nov 7, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "MC Corrections",
            "content": "College Board MCQ Corrections. . Question: #25 . The correct answer to this problem would be D, I and II. Choice I shows the reader the height, width, and depth of a box through methods getHeight, getWidth, and getDepth, which allow comparisons to be made in all three dimensions to see if one box can fit inside another box. Choice II is also correct because it gives the user methods smallerHeight, smallerWidth, and smallerDepth notify the reader if one of the boxes are smaller than the other in all three dimensions. . Question: #18 . The correct answer to this problem would be B, since using Math.random() generates random floating point numbers between 0 and 1, without including 1. C is incorrect because using the statement from C will result in a range between 1 and myList.size(). . Question: #38 . The correct answer to this problem would be A, since the expression will evaluate to true since x is always either greater than 1000 or less than 1500. . Question: #14 . The correct answer to this problem would be E, since the access that&#39;s being used here is the access that would be used if myVehicles was an array and not an ArrayList. . Question: #10 . The correct answer to this problem would be B, Choice II will eventually cause an ArrayIndexOutOfBoundsException to be thrown when the recursive call is made with target and -1. Choice II is correcyt because Choice I will return the correct value if the element in the array with one element was target. . Question #17 . The correct answer to this problem would be C, since the size of the array is immutable for option B. When the assignment statement is executed, no values are removed, but copied to the element to the left. .",
            "url": "https://guapbeast.github.io/Trimester-1-Fast-Pages/jupyter/2022/11/06/corrections-copy.html",
            "relUrl": "/jupyter/2022/11/06/corrections-copy.html",
            "date": " • Nov 6, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Unit 6 Arrays",
            "content": "Arrays are used to store multiple values in a single variable, instead of declaring separate variables for each value . The length of an array is established when the array is created. . An array is a collection of similar types of data. . In the Java array, each memory location is associated with a number. The number is known as an array index. . Elements must be of the same type in a Java Array. . import java.util.*; import java.io.*; public class chooseMethod { private int[] values; public chooseMethod(int[] array) { this.values = array; } public int[] getArray() { return this.values; } public String getString() { return Arrays.toString(this.values); } public void swap() { int temp = values[0]; values[0] = values[values.length - 1]; values[values.length - 1] = temp; } // The line of code below replaces even values public void replacement() { for (int i = 0; i &lt; values.length; i++) { if (values[i] % 2 == 0) { values[i] = 0; } } } public boolean incrementation() { for (int i = 0; i &lt; this.values.length - 1; i++) { if (values[i] &gt; values[i+1]) { return false; } return true; } return false; } public static void main() { chooseMethod method = new chooseMethod(new int[]{1,6,12,8,8,9,34,5,123,698,43,68,1}); System.out.println(method.getString()); System.out.println(method.incrementation()); method.swap(); System.out.println(method.getString()); method.replacement(); System.out.println(method.getString()); System.out.println(method.incrementation()); } } chooseMethod.main(); . [1, 6, 12, 8, 8, 9, 34, 5, 123, 698, 43, 68, 1] true [1, 6, 12, 8, 8, 9, 34, 5, 123, 698, 43, 68, 1] [1, 0, 0, 0, 0, 9, 0, 5, 123, 0, 43, 0, 1] false .",
            "url": "https://guapbeast.github.io/Trimester-1-Fast-Pages/jupyter/2022/10/25/unit6.html",
            "relUrl": "/jupyter/2022/10/25/unit6.html",
            "date": " • Oct 25, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Unit 5 Writing Classes",
            "content": "Java is an object-oriented programming language. . Everything in Java is associated with classes and objects, along with its attributes and methods. For example: in real life, a car is an object. . The car has attributes, such as weight and color, and methods, such as drive and brake. . Classes are sets of objects which share common characteristics/ behavior and common properties/ attributes. . public int scoreGuess (String guess){ int count = 0; //Initializes count at 0 for (int i = 0; i &lt;= secret.length() - guess.length(); i++) { if (secret.substring(i, i + guess.length()). equals(guess)) { count++; } } return count * Math.pow(guess.length(), 2); } . public void addMembers (String[] names, int gradYear) { for (string n : names) { MemberInfo newM = new MemberInfo (n, gradYear, true); memberList.add(newM); } } . Creation of Classes: should be done with UpperCamelCase and made with a key word for the class. . class MyPainter { } . Main Method: Called automatically when a class is ran and creates an object. . class MyPainter { public static void main (String[] args) { MyPainter obj = new MyPainter(); } } . The Keyword &quot;This&quot; helps us to see the properties of a class. . Constructor: Called when the object is created and doesn&#39;t return a value because the object is automatically called. . class MyPainter { int paint1; int paint2; public MyPainter (int paint1input, int paint2input) //This is a constructor . Get Methods: obtain the properties of an object beyond the defined class . class MyPainter { int paint1; int paint2; public MyPainter (int paint1input, int paint2input) //This is a constructor public int getpaint1() { return this.paint1; } .",
            "url": "https://guapbeast.github.io/Trimester-1-Fast-Pages/jupyter/2022/10/19/unit5.html",
            "relUrl": "/jupyter/2022/10/19/unit5.html",
            "date": " • Oct 19, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Unit 3 Boolean Expressions and if Statements",
            "content": "public int getChargeStartTime (int chargeTime) { int startHour = 0; int lowPrice = 500_000; for (int x = 0; x &lt; 23; x++) { if (lowPrice &gt; getChargingCost(x, chargeTime)) { lowPrice = getChargingCost(x, chargeTime); startHour = x; } } return startHour; } . public boolean isStrictlyIncreasing () { boolean increasing = true; for (int i = 1; i &lt; digitListSize(); i++) { if (digitList.get(i-1) &gt;= digitList.get(i)) { increasing = false; } } return increasing; } . public boolean isBalanced(ArrayList&lt;String&gt; delimiters) { int numOpen = 0, numClosed = 0; for(String d : delimiters) { if(d.equals(openDel)) numOpen++; if(d.equals(closeDel)) numClosed++; if(numClosed &gt; numOpen) return false; } return numOpen == numClosed; } . Compund Boolean Expression: Combinations of Boolean operators result in the creation of compund boolean operators, which include the &amp;&amp;, ||, or ! operators. (And, Or, Not, respectively) . boolean IsDecember = true; boolean IsNovember= false; boolean compound = !(IsDecember &amp;&amp; IsNovember) &amp;&amp; (IsNovember || IsDecember); System.out.println(compound); . true . DeMorgan&#39;s Law: Helps with the simplification and abstraction of boolean expressions. . boolean first = true; boolean second = false; // complicated boolean expression boolean res1 = !((!(first &amp;&amp; second)) || (!(first || second))); // simplified using De Morgan&#39;s Law once boolean res2 = !((!first || !second) || (!first &amp;&amp; !second)); System.out.println(res1 + &quot; &quot; + res2 + &quot; &quot;); . false false . Truth Tables: Reveal the actual values ot boolean expressions, 0 is false, 1 is true . 0 | 0 | 1 | 1 | 0 | 1 | .",
            "url": "https://guapbeast.github.io/Trimester-1-Fast-Pages/jupyter/2022/10/17/unit3.html",
            "relUrl": "/jupyter/2022/10/17/unit3.html",
            "date": " • Oct 17, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "RapidAPI",
            "content": "song hits hits Abbreviated title .",
            "url": "https://guapbeast.github.io/Trimester-1-Fast-Pages/markdown/2022/10/11/genius-api.html",
            "relUrl": "/markdown/2022/10/11/genius-api.html",
            "date": " • Oct 11, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Array List Practice",
            "content": "import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import javax.imageio.stream.ImageOutputStream; import javax.imageio.stream.ImageInputStream; import javax.imageio.metadata.IIOMetadata; import javax.imageio.IIOImage; import javax.imageio.ImageIO; import javax.imageio.ImageWriteParam; import javax.imageio.ImageWriter; import javax.imageio.ImageReader; import javax.imageio.ImageTypeSpecifier; ArrayList&lt;String&gt; array = new ArrayList&lt;&gt;(); array.add(&quot;Apple Music&quot;); array.add(&quot;Spotify&quot;); array.add(&quot;Soundcloud&quot;); array.add(&quot;Pandora&quot;); array.add(&quot;Amazon Music&quot;); array.add(&quot;Youtube Music&quot;); System.out.println(array); . [Apple Music, Spotify, Soundcloud, Pandora, Amazon Music, Youtube Music] . ArrayList&lt;String&gt; array = new ArrayList&lt;&gt;(); array.add(&quot;Apple Music&quot;); array.add(&quot;Spotify&quot;); array.add(&quot;Soundcloud&quot;); array.add(&quot;Pandora&quot;); array.add(&quot;Amazon Music&quot;); array.add(&quot;Youtube Music&quot;); array.remove(&quot;Pandora&quot;); System.out.println(array); . [Apple Music, Spotify, Soundcloud, Amazon Music, Youtube Music] . ArrayList&lt;String&gt; arrayartist = new ArrayList&lt;&gt;(); arrayartist.add(&quot;Ed Sheeran&quot;); arrayartist.add(&quot;Justin Bieber&quot;); arrayartist.add(&quot;Drake&quot;); arrayartist.add(&quot;Bad Bunny&quot;); arrayartist.add(&quot;Ariana Grande&quot;); arrayartist.add(&quot;The Weekend&quot;); arrayartist.add(&quot;Taylor Swift&quot;); array.size(); . 5 . ArrayList&lt;String&gt; arrayartist = new ArrayList&lt;&gt;(); arrayartist.add(&quot;Ed Sheeran&quot;); arrayartist.add(&quot;Justin Bieber&quot;); arrayartist.add(&quot;Drake&quot;); arrayartist.add(&quot;Bad Bunny&quot;); arrayartist.add(&quot;Ariana Grande&quot;); arrayartist.add(&quot;The Weekend&quot;); arrayartist.add(&quot;Taylor Swift&quot;); System.out.println(arrayartist); . [Ed Sheeran, Justin Bieber, Drake, Bad Bunny, Ariana Grande, The Weekend, Taylor Swift] . ArrayList&lt;String&gt; array = new ArrayList&lt;&gt;(); array.add(&quot;Apple Music&quot;); array.add(&quot;Spotify&quot;); array.add(&quot;Soundcloud&quot;); array.add(&quot;Pandora&quot;); array.add(&quot;Amazon Music&quot;); array.add(&quot;Youtube Music&quot;); array.size(); . 6 . ArrayList&lt;String&gt; arrayartist = new ArrayList&lt;&gt;(); arrayartist.add(&quot;Ed Sheeran&quot;); arrayartist.add(&quot;Justin Bieber&quot;); arrayartist.add(&quot;Drake&quot;); arrayartist.add(&quot;Bad Bunny&quot;); arrayartist.add(&quot;Ariana Grande&quot;); arrayartist.add(&quot;The Weekend&quot;); arrayartist.add(&quot;Taylor Swift&quot;); System.out.println(arrayartist); arrayartist.clear(); System.out.println(arrayartist); . [Ed Sheeran, Justin Bieber, Drake, Bad Bunny, Ariana Grande, The Weekend, Taylor Swift] [] . ArrayList&lt;String&gt; array = new ArrayList&lt;&gt;(); array.add(&quot;Apple Music&quot;); array.add(&quot;Spotify&quot;); array.add(&quot;Soundcloud&quot;); array.add(&quot;Pandora&quot;); array.add(&quot;Amazon Music&quot;); array.add(&quot;Youtube Music&quot;); array.get(3); . Pandora . ArrayList&lt;String&gt; array = new ArrayList&lt;&gt;(); array.add(&quot;Apple Music&quot;); array.add(&quot;Spotify&quot;); array.add(&quot;Soundcloud&quot;); array.add(&quot;Pandora&quot;); array.add(&quot;Amazon Music&quot;); array.add(&quot;Youtube Music&quot;); array.indexOf(&quot;Amazon Music&quot;); . 4 . ArrayList&lt;String&gt; array = new ArrayList&lt;&gt;(); array.add(&quot;Apple Music&quot;); array.add(&quot;Spotify&quot;); array.add(&quot;Soundcloud&quot;); array.add(&quot;Pandora&quot;); array.add(&quot;Amazon Music&quot;); array.add(&quot;Youtube Music&quot;); array.lastIndexOf(&quot;Apple Music&quot;); . 0 . ArrayList&lt;String&gt; array = new ArrayList&lt;&gt;(); array.add(&quot;Apple Music&quot;); array.add(&quot;Spotify&quot;); array.add(&quot;Soundcloud&quot;); array.add(&quot;Pandora&quot;); array.add(&quot;Amazon Music&quot;); array.add(&quot;Youtube Music&quot;); array.indexOf(&quot;Youtube Music&quot;); . 5 . ArrayList&lt;String&gt; array = new ArrayList&lt;&gt;(); array.add(&quot;Apple Music&quot;); array.add(&quot;Spotify&quot;); array.add(&quot;Soundcloud&quot;); array.add(&quot;Pandora&quot;); array.add(&quot;Amazon Music&quot;); array.add(&quot;Youtube Music&quot;); array.hashCode(); . 1688530220 . ArrayList&lt;String&gt; array = new ArrayList&lt;&gt;(); array.add(&quot;Apple Music&quot;); array.add(&quot;Spotify&quot;); array.add(&quot;Soundcloud&quot;); array.add(&quot;Pandora&quot;); array.add(&quot;Amazon Music&quot;); array.add(&quot;Youtube Music&quot;); array.isEmpty(); . false . ArrayList&lt;String&gt; array = new ArrayList&lt;&gt;(); array.add(&quot;Apple Music&quot;); array.add(&quot;Spotify&quot;); array.add(&quot;Soundcloud&quot;); array.add(&quot;Pandora&quot;); array.add(&quot;Amazon Music&quot;); array.add(&quot;Youtube Music&quot;); array.contains(&quot;Spotify&quot;); . true . ArrayList&lt;String&gt; array = new ArrayList&lt;&gt;(); array.add(&quot;Apple Music&quot;); array.add(&quot;Spotify&quot;); array.add(&quot;Soundcloud&quot;); array.add(&quot;Pandora&quot;); array.add(&quot;Amazon Music&quot;); array.add(&quot;Youtube Music&quot;); array.contains(&quot;Google Play&quot;); . false . ArrayList&lt;String&gt; array = new ArrayList&lt;&gt;(); array.add(&quot;Apple Music&quot;); array.add(&quot;Spotify&quot;); array.add(&quot;Soundcloud&quot;); array.add(&quot;Pandora&quot;); array.add(&quot;Amazon Music&quot;); array.add(&quot;Youtube Music&quot;); array.add(&quot;30&quot;); array.add(&quot;314159265359&quot;); array.sort(Comparator.naturalOrder()); System.out.println(array); . [30, 314159265359, Amazon Music, Apple Music, Pandora, Soundcloud, Spotify, Youtube Music] . ArrayList&lt;String&gt; array = new ArrayList&lt;&gt;(); array.add(&quot;Apple Music&quot;); array.add(&quot;Spotify&quot;); array.add(&quot;Soundcloud&quot;); array.add(&quot;Pandora&quot;); array.add(&quot;Amazon Music&quot;); array.add(&quot;Youtube Music&quot;); ArrayList&lt;String&gt; arrayartist = new ArrayList&lt;&gt;(); arrayartist.add(&quot;Ed Sheeran&quot;); arrayartist.add(&quot;Justin Bieber&quot;); arrayartist.add(&quot;Drake&quot;); arrayartist.add(&quot;Bad Bunny&quot;); arrayartist.add(&quot;Ariana Grande&quot;); arrayartist.add(&quot;The Weekend&quot;); arrayartist.add(&quot;Taylor Swift&quot;); array.addAll(4, arrayartist); System.out.println(array); . [Apple Music, Spotify, Soundcloud, Pandora, Ed Sheeran, Justin Bieber, Drake, Bad Bunny, Ariana Grande, The Weekend, Taylor Swift, Amazon Music, Youtube Music] . ArrayList&lt;String&gt; array = new ArrayList&lt;&gt;(); array.add(&quot;Apple Music&quot;); array.add(&quot;Spotify&quot;); array.add(&quot;Soundcloud&quot;); array.add(&quot;Pandora&quot;); array.add(&quot;Amazon Music&quot;); array.add(&quot;Youtube Music&quot;); ArrayList&lt;String&gt; arrayartist = new ArrayList&lt;&gt;(); arrayartist.add(&quot;Ed Sheeran&quot;); arrayartist.add(&quot;Justin Bieber&quot;); arrayartist.add(&quot;Drake&quot;); arrayartist.add(&quot;Bad Bunny&quot;); arrayartist.add(&quot;Ariana Grande&quot;); arrayartist.add(&quot;The Weekend&quot;); arrayartist.add(&quot;Taylor Swift&quot;); array.set(5, &quot;Justin Bieber&quot;); System.out.println(array); . [Apple Music, Spotify, Soundcloud, Pandora, Amazon Music, Justin Bieber] . ArrayList&lt;String&gt; array = new ArrayList&lt;&gt;(); array.add(&quot;Apple Music&quot;); array.add(&quot;Spotify&quot;); array.add(&quot;Soundcloud&quot;); array.add(&quot;Pandora&quot;); array.add(&quot;Amazon Music&quot;); array.add(&quot;Youtube Music&quot;); ArrayList&lt;String&gt; arrayartist = new ArrayList&lt;&gt;(); arrayartist.add(&quot;Ed Sheeran&quot;); arrayartist.add(&quot;Justin Bieber&quot;); arrayartist.add(&quot;Drake&quot;); arrayartist.add(&quot;Bad Bunny&quot;); arrayartist.add(&quot;Ariana Grande&quot;); arrayartist.add(&quot;The Weekend&quot;); arrayartist.add(&quot;Taylor Swift&quot;); array.set(5, &quot;Ariana Grande&quot;); System.out.println(array); . [Apple Music, Spotify, Soundcloud, Pandora, Amazon Music, Ariana Grande] . int i = 0; while (i &lt; 5) { System print.out.ln(i); i++; } . | System print.out.ln(i); &#39;;&#39; expected .",
            "url": "https://guapbeast.github.io/Trimester-1-Fast-Pages/jupyter/2022/10/10/array.html",
            "relUrl": "/jupyter/2022/10/10/array.html",
            "date": " • Oct 10, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Unit 2 Using Objects",
            "content": "Java is an object-oriented programming language. . Everything in Java is associated with classes and objects, along with its attributes and methods. . An object is a member / instance of a Java class. . A class is a template or blueprint from which objects are created. . An object is the instance of a class. . Java has 8 primitive data types/ differet types of objects: the byte, short, int, long, float, double, char and boolean. . import java.util.*; public class Goblin { private String name; private int HP; private int DMG; private double hitChance; public String getName() { return name; } public int getHP() { return HP; } public int getDMG() { return DMG; } public double getHitChance() { return hitChance; } public boolean isAlive() { if (this.HP &gt; 0) { return true; } else { return false; } } public void setName(String newName) { this.name = newName; } public void setHP(int newHP) { this.HP = newHP; } public void takeDMG(int takenDamage) { this.HP -= takenDamage; } public void setDMG(int newDMG) { this.DMG = newDMG; } public void setHitChance(double newHitChance) { this.hitChance = newHitChance; } } public class Duel { public static void fight(Goblin goblin1, Goblin goblin2) { while (goblin1.isAlive() &amp;&amp; goblin2.isAlive()) { // goblin1 hit chance tester if (Math.random() &lt; goblin2.getHitChance()) { goblin2.takeDMG(goblin2.getDMG()); System.out.println(goblin1.getName() + &quot; takes &quot; + goblin2.getDMG() + &quot; damage&quot;); } else { System.out.println(goblin2.getName() + &quot; missed!&quot;); } // print hp of goblin1 System.out.println(goblin1.getName() + &quot; HP: &quot; + goblin1.getHP()); if (!goblin1.isAlive()) { System.out.println(goblin1.getName() + &quot; has perished&quot;); break; } // if statement for goblin2 hit chance if (Math.random() &lt; goblin1.getHitChance()) { goblin2.takeDMG(goblin1.getDMG()); System.out.println(goblin2.getName() + &quot; takes &quot; + goblin1.getDMG() + &quot; damage&quot;); } else { System.out.println(goblin1.getName() + &quot; missed!&quot;); } // print hp of goblin2 System.out.println(goblin2.getName() + &quot; HP: &quot; + goblin2.getHP()); if (!goblin2.isAlive()) { System.out.println(goblin2.getName() + &quot; has perished&quot;); break; } } } public static void main(String[] args) { Goblin goblin1 = new Goblin(); goblin1.setName(&quot;Lightning McQueen&quot;); goblin1.setHP(12); goblin1.setDMG(2); goblin1.setHitChance(0.5); Goblin goblin2 = new Goblin(); goblin2.setName(&quot;Mater&quot;); goblin2.setHP(4); goblin2.setDMG(1); goblin2.setHitChance(0.75); fight(goblin1, goblin2); } } Duel.main(null); . Mater missed! Lightning McQueen HP: 12 Mater takes 2 damage Mater HP: 2 Lightning McQueen takes 1 damage Lightning McQueen HP: 12 Lightning McQueen missed! Mater HP: 1 Mater missed! Lightning McQueen HP: 12 Lightning McQueen missed! Mater HP: 1 Lightning McQueen takes 1 damage Lightning McQueen HP: 12 Mater takes 2 damage Mater HP: -2 Mater has perished . Concatenation: The combination of two or more strings together by using the + operator. . String a = &quot;Chicken&quot;; String b = &quot;Duck&quot;; String c = &quot;Goose&quot;; String d = a + &quot; &quot; + b + &quot; &quot; + c; System.out.println(d); . Chicken Duck Goose . Math Class: Provides capailites of the utilization of Math operators. . double x = 6; double y = 9; int nice = (int) (y/x); int brain = (int) (x*y); System.out.println(nice); System.out.println(brain) . 1 54 . Comparison of Numbers: Numbers can be compared when the operator &quot;==&quot; is used, however &quot;.string()&quot; must be used to compare strings . int a = 3; int b = 90; System.out.println(a == b); . false .",
            "url": "https://guapbeast.github.io/Trimester-1-Fast-Pages/jupyter/2022/10/09/unit2.html",
            "relUrl": "/jupyter/2022/10/09/unit2.html",
            "date": " • Oct 9, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "Unit 1 primitives",
            "content": "import java.lang.Math; import java.util.Scanner; public class NumberGuess { private int answer; private int guess; Scanner in = new Scanner(System.in); public NumberGuess() { this.answer = (int) Math.floor(Math.random()*10 + 1); System.out.println(answer); } public void play() { while (answer != guess) { this.getGuess(); } in.close(); } public void getGuess() { System.out.print(&quot;Guess a number 1-10: &quot;); this.guess = in.nextInt(); System.out.println(this.guess); if (this.guess &gt; this.answer) { System.out.println(&quot;too high&quot;); } else if (this.guess &lt; this.answer) { System.out.println(&quot;too low&quot;); } else { System.out.println(&quot;congrats&quot;); } } public static void main(String[] args) { NumberGuess num = new NumberGuess(); num.play(); } } . Second Quiz . Casting, specifically for Division Casting, specifically for Truncating or Rounding Wrapper Classes, why wrap int, double. Show examples Concatenation, explain or illustrate rules on mixed type Concatenation Math class, specifically Random usage Compound Boolean Expression .",
            "url": "https://guapbeast.github.io/Trimester-1-Fast-Pages/jupyter/2022/10/04/unit1.html",
            "relUrl": "/jupyter/2022/10/04/unit1.html",
            "date": " • Oct 4, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "POJO, JPA, API, and FE Notes",
            "content": "POJO helps to create an entity, which can be converted to a database. The JAVA persistent API, or JPA helps coders to interact with the database; API&#39;s in particular help us to store and share data from a community of users. . . Building out the RESTful API services is the last major backend step necessary to access our data. . . Lists are a super class to ArrayList. .",
            "url": "https://guapbeast.github.io/Trimester-1-Fast-Pages/jupyter/2022/10/03/POJO-Notes.html",
            "relUrl": "/jupyter/2022/10/03/POJO-Notes.html",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "API Implementation",
            "content": "import java.net.URI; import java.net.http.HttpClient; import java.net.http.HttpRequest; import java.net.http.HttpResponse; import java.util.Random; HttpRequest request = HttpRequest.newBuilder() .uri(URI.create(&quot;https://wft-geo-db.p.rapidapi.com/v1/geo/adminDivisions&quot;)) .header(&quot;X-RapidAPI-Key&quot;, &quot;9d1b75d842msh20486d8bf8d5c19p1904abjsneb2943a9124c&quot;) .header(&quot;X-RapidAPI-Host&quot;, &quot;wft-geo-db.p.rapidapi.com&quot;) .method(&quot;GET&quot;, HttpRequest.BodyPublishers.noBody()) .build(); HttpResponse&lt;String&gt; response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString()); System.out.println(response.body()); . {&#34;data&#34;:[{&#34;id&#34;:3515514,&#34;wikiDataId&#34;:&#34;Q4117373&#34;,&#34;name&#34;:&#34;Al Mamzar&#34;,&#34;country&#34;:&#34;United Arab Emirates&#34;,&#34;countryCode&#34;:&#34;AE&#34;,&#34;region&#34;:&#34;Dubai&#34;,&#34;regionCode&#34;:&#34;DU&#34;,&#34;latitude&#34;:25.309469444,&#34;longitude&#34;:55.342811111,&#34;population&#34;:0},{&#34;id&#34;:3386644,&#34;wikiDataId&#34;:&#34;Q3694483&#34;,&#34;name&#34;:&#34;Ab Band District&#34;,&#34;country&#34;:&#34;Afghanistan&#34;,&#34;countryCode&#34;:&#34;AF&#34;,&#34;region&#34;:&#34;Ghazni&#34;,&#34;regionCode&#34;:&#34;GHA&#34;,&#34;latitude&#34;:32.983,&#34;longitude&#34;:67.967,&#34;population&#34;:0},{&#34;id&#34;:3339608,&#34;wikiDataId&#34;:&#34;Q2572213&#34;,&#34;name&#34;:&#34;Ab Kamari&#34;,&#34;country&#34;:&#34;Afghanistan&#34;,&#34;countryCode&#34;:&#34;AF&#34;,&#34;region&#34;:&#34;Badghis&#34;,&#34;regionCode&#34;:&#34;BDG&#34;,&#34;latitude&#34;:34.925,&#34;longitude&#34;:62.901666666,&#34;population&#34;:0},{&#34;id&#34;:3228129,&#34;wikiDataId&#34;:&#34;Q1650529&#34;,&#34;name&#34;:&#34;Achin&#34;,&#34;country&#34;:&#34;Afghanistan&#34;,&#34;countryCode&#34;:&#34;AF&#34;,&#34;region&#34;:&#34;Nangarhar&#34;,&#34;regionCode&#34;:&#34;NAN&#34;,&#34;latitude&#34;:34.0894,&#34;longitude&#34;:70.683,&#34;population&#34;:0},{&#34;id&#34;:3301438,&#34;wikiDataId&#34;:&#34;Q2714271&#34;,&#34;name&#34;:&#34;Adraskan District&#34;,&#34;country&#34;:&#34;Afghanistan&#34;,&#34;countryCode&#34;:&#34;AF&#34;,&#34;region&#34;:&#34;Herat&#34;,&#34;regionCode&#34;:&#34;HER&#34;,&#34;latitude&#34;:33.705277777,&#34;longitude&#34;:61.995555555,&#34;population&#34;:0}],&#34;links&#34;:[{&#34;rel&#34;:&#34;first&#34;,&#34;href&#34;:&#34;/v1/geo/cities?offset=0&amp;limit=5&#34;},{&#34;rel&#34;:&#34;next&#34;,&#34;href&#34;:&#34;/v1/geo/cities?offset=5&amp;limit=5&#34;},{&#34;rel&#34;:&#34;last&#34;,&#34;href&#34;:&#34;/v1/geo/cities?offset=71985&amp;limit=5&#34;}],&#34;metadata&#34;:{&#34;currentOffset&#34;:0,&#34;totalCount&#34;:71986}} .",
            "url": "https://guapbeast.github.io/Trimester-1-Fast-Pages/jupyter/2022/10/02/api.html",
            "relUrl": "/jupyter/2022/10/02/api.html",
            "date": " • Oct 2, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "RapidAPI",
            "content": "City Country Country Abbreviated Region .",
            "url": "https://guapbeast.github.io/Trimester-1-Fast-Pages/markdown/2022/10/02/api-copy.html",
            "relUrl": "/markdown/2022/10/02/api-copy.html",
            "date": " • Oct 2, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "Objects Notes",
            "content": "A Class is a template for an Object. An Object is an instances of a Class. . . Java is an object-oriented programming language. Everything in Java is associated with classes and objects, along with its attributes and methods. . For example: in real life, a car is an object. The car has attributes, such as weight and color, and methods, such as drive and brake. . .",
            "url": "https://guapbeast.github.io/Trimester-1-Fast-Pages/jupyter/2022/10/01/Objects-Notes.html",
            "relUrl": "/jupyter/2022/10/01/Objects-Notes.html",
            "date": " • Oct 1, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "MONA Lisa",
            "content": "import java.awt.Color; import java.awt.image.BufferedImage; import java.awt.Image; import java.awt.Graphics2D; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import javax.imageio.stream.ImageOutputStream; import javax.imageio.stream.ImageInputStream; import javax.imageio.metadata.IIOMetadata; import javax.imageio.IIOImage; import javax.imageio.ImageIO; import javax.imageio.ImageWriteParam; import javax.imageio.ImageWriter; import javax.imageio.ImageReader; import javax.imageio.ImageTypeSpecifier; public class Pics { private final String inDir = &quot;images/&quot;; // location of images private final String outDir = &quot;images/tmp/&quot;; // location of created files private String inFile; private String resizedFile; private String asciiFile; private String greyScaleFile; private String redScaleFile; private String blueScaleFile; private String greenScaleFile; private String ext; // extension of file private long bytes; private int width; private int height; // Constructor obtains attributes of picture public Pics(String name, String ext) { this.ext = ext; this.inFile = this.inDir + name + &quot;.&quot; + ext; this.resizedFile = this.outDir + name + &quot;.&quot; + ext; this.asciiFile = this.outDir + name + &quot;.txt&quot;; this.greyScaleFile = this.outDir + &quot;Grey&quot; + name + &quot;.&quot; + ext; this.redScaleFile = this.outDir + &quot;Red&quot; + name + &quot;.&quot; + ext; this.blueScaleFile = this.outDir + &quot;Blue&quot; + name + &quot;.&quot; + ext; this.greenScaleFile = this.outDir + &quot;Green&quot; + name + &quot;.&quot; + ext; this.setStats(); } // An image contains metadata, namely size, width, and height public void setStats() { BufferedImage img; try { Path path = Paths.get(this.inFile); this.bytes = Files.size(path); img = ImageIO.read(new File(this.inFile)); this.width = img.getWidth(); this.height = img.getHeight(); } catch (IOException e) { } } // Console print of data public void printStats(String msg) { System.out.println(msg + &quot;: &quot; + this.bytes + &quot; &quot; + this.width + &quot;x&quot; + this.height + &quot; &quot; + this.inFile); } // Convert scaled image into buffered image public static BufferedImage convertToBufferedImage(Image img) { // Create a buffered image with transparency BufferedImage bi = new BufferedImage( img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB); // magic? Graphics2D graphics2D = bi.createGraphics(); graphics2D.drawImage(img, 0, 0, null); graphics2D.dispose(); return bi; } // Scale or reduce to &quot;scale&quot; percentage provided public void resize(int scale) { BufferedImage img = null; Image resizedImg = null; int width = (int) (this.width * (scale/100.0) + 0.5); int height = (int) (this.height * (scale/100.0) + 0.5); try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data // create a new BufferedImage for drawing resizedImg = img.getScaledInstance(width, height, Image.SCALE_SMOOTH); } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(resizedImg), this.ext, new File(resizedFile)); } catch (IOException e) { return; } this.inFile = this.resizedFile; // use scaled file vs original file in Class this.setStats(); } // convert every pixel to an ascii character (ratio does not seem correct) public void convertToAscii() { BufferedImage img = null; PrintWriter asciiPrt = null; FileWriter asciiWrt = null; try { File file = new File(this.asciiFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { asciiPrt = new PrintWriter(asciiWrt = new FileWriter(this.asciiFile, true)); } catch (IOException e) { System.out.println(&quot;ASCII out file create error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i &lt; img.getHeight(); i+=3) { for (int j = 0; j &lt; img.getWidth(); j+=1) { Color col = new Color(img.getRGB(j, i)); double pixVal = (((col.getRed() * 0.30) + (col.getBlue() * 0.59) + (col .getGreen() * 0.11))); try { asciiPrt.print(asciiChar(pixVal)); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } try { asciiPrt.println(&quot;&quot;); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } } // conversion table, there may be better out there ie https://www.billmongan.com/Ursinus-CS173-Fall2020/Labs/ASCIIArt public String asciiChar(double g) { String str = &quot; &quot;; if (g &gt;= 240) { str = &quot; &quot;; } else if (g &gt;= 210) { str = &quot;.&quot;; } else if (g &gt;= 190) { str = &quot;*&quot;; } else if (g &gt;= 170) { str = &quot;+&quot;; } else if (g &gt;= 120) { str = &quot;^&quot;; } else if (g &gt;= 110) { str = &quot;&amp;&quot;; } else if (g &gt;= 80) { str = &quot;8&quot;; } else if (g &gt;= 60) { str = &quot;#&quot;; } else { str = &quot;@&quot;; } return str; } public void greyScale() { BufferedImage img = null; try { File file = new File(this.greyScaleFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color col = new Color(img.getRGB(j, i)); int grey = (int)(col.getRed()*0.3 + col.getGreen()*0.59 + col.getBlue()*0.11); try { Color rgb = new Color(grey, grey, grey); img.setRGB(j, i, rgb.getRGB()); } catch (Exception ex) { } } } try { ImageIO.write(img, &quot;png&quot;, new File(this.greyScaleFile)); } catch (Exception ex) { } } public void redScale() { BufferedImage img = null; try { File file = new File(this.redScaleFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color col = new Color(img.getRGB(j, i)); int red = (int)(col.getRed()); try { Color rgb = new Color(red, 0, 0); img.setRGB(j, i, rgb.getRGB()); } catch (Exception ex) { } } } try { ImageIO.write(img, &quot;png&quot;, new File(this.redScaleFile)); } catch (Exception ex) { } } public void greenScale() { BufferedImage img = null; try { File file = new File(this.greenScaleFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color col = new Color(img.getRGB(j, i)); int green = (int)(col.getGreen()); try { Color rgb = new Color(0, green, 0); img.setRGB(j, i, rgb.getRGB()); } catch (Exception ex) { } } } try { ImageIO.write(img, &quot;png&quot;, new File(this.greenScaleFile)); } catch (Exception ex) { } } public void blueScale() { BufferedImage img = null; try { File file = new File(this.blueScaleFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color col = new Color(img.getRGB(j, i)); int blue = (int)(col.getBlue()); try { Color rgb = new Color(0, 0, blue); img.setRGB(j, i, rgb.getRGB()); } catch (Exception ex) { } } } try { ImageIO.write(img, &quot;png&quot;, new File(this.blueScaleFile)); } catch (Exception ex) { } } // tester/driver public static void main(String[] args) throws IOException { Pics ascii = new Pics(&quot;MonaLisa&quot;, &quot;png&quot;); ascii.printStats(&quot;Original&quot;); ascii.resize(33); ascii.printStats(&quot;Scaled&quot;); ascii.convertToAscii(); Pics grey = new Pics(&quot;MonaLisa&quot;, &quot;png&quot;); grey.greyScale(); Pics red = new Pics(&quot;MonaLisa&quot;, &quot;png&quot;); red.redScale(); Pics green = new Pics(&quot;MonaLisa&quot;, &quot;png&quot;); green.greenScale(); Pics blue = new Pics(&quot;MonaLisa&quot;, &quot;png&quot;); blue.blueScale(); } } Pics.main(null); . Original: 499298 389x413 images/MonaLisa.png Scaled: 55625 128x136 images/tmp/MonaLisa.png . . . . .",
            "url": "https://guapbeast.github.io/Trimester-1-Fast-Pages/2022/09/30/MonaLisa.html",
            "relUrl": "/2022/09/30/MonaLisa.html",
            "date": " • Sep 30, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "API Notes",
            "content": "APIs are present across all of the world wide web. APIs are a significant and extremely useful tool to extract lots of data from the internet via APIs. . . APIs and Jupyter are important tools that are used in data and computer science, and used to develop a project. . HttpClients are be used to send requests and retrieveresponses, HttpRequests set up the header and body to API provider, the HttpResponse is returned as a result of sending an HttpRequest, and typically a response body will be received. . . Finally, the response body needs to be formatted as per the needs of the project. .",
            "url": "https://guapbeast.github.io/Trimester-1-Fast-Pages/jupyter/2022/09/26/Java-Api.html",
            "relUrl": "/jupyter/2022/09/26/Java-Api.html",
            "date": " • Sep 26, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "FRQ",
            "content": "a) Write the static method numberOfLeapYears, which returns the number of leap years between year1 and year2, inclusive. In order to calculate this value, a helper method is provided for you. • isLeapYear(year) returns true if year is a leap year and false otherwise. Complete method numberOfLeapYears below. You must use isLeapYear appropriately to receive full credit. /** Returns the number of leap years between year1 and year2, inclusive. . Precondition: 0 &lt;= year1 &lt;= year2 */ public static int numberOfLeapYears(int year1, int year2) | . public static int numberOfLeapYears(int year1, int year2) { for (int y=year1; y&lt;=year2; y++) // The helper method &quot;isLeapYear(y)&quot;returns true given an input of a leap year and false given the input of a non-leap year. if (isLeapYear(y)) { count++; } } return count; } . The Method &quot;numberOfLeapYears&quot; outputs the number of leap years that there are between a certain set of years. The helper method &quot;isLeapYear(y)&quot; is the main part of this function and returns true given an input of a leap year and false given the input of a non-leap year. . 1b) Write the static method dayOfWeek, which returns the integer value representing the day of the week for the given date (month, day, year), where 0 denotes Sunday, 1 denotes Monday, ..., and 6 denotes Saturday. For example, 2019 began on a Tuesday, and January 5 is the fifth day of 2019. As a result, January 5, 2019, fell on a Saturday, and the method call dayOfWeek(1, 5, 2019) returns 6. As another example, January 10 is the tenth day of 2019. As a result, January 10, 2019, fell on a Thursday, and the method call dayOfWeek(1, 10, 2019) returns 4. In order to calculate this value, two helper methods are provided for you. • firstDayOfYear(year) returns the integer value representing the day of the week for the first day of year, where 0 denotes Sunday, 1 denotes Monday, ..., and 6 denotes Saturday. For example, since 2019 began on a Tuesday, firstDayOfYear(2019) returns 2. • dayOfYear(month, day, year) returns n, where month, day, and year specify the nth day of the year. For the first day of the year, January 1 (month = 1, day = 1), the value 1 is returned. This method accounts for whether year is a leap year. For example, dayOfYear(3, 1, 2017) returns 60, since 2017 is not a leap year, while dayOfYear(3, 1, 2016) returns 61, since 2016 is a leap year. . public static int dayOfWeek(int month, int day, int year) { int firstDay = firstDayOfYear(year); int day = dayOfYear(month, day, year); //subtract one because the calendar doesn&#39;t start at 0 return (firstDay + day - 1) % 7; } . The method firstDayOfYear outputs a value that shows what day of the week a date on the calendar is. Sunday is represented by a value of zero, Monday by one, up until Saturday which is represented by six. . The methoddayOfYear tells us what day a certain calendar date on. For example, dayOfYear( 7, 6, 2011 ) would return 6 because the 6th of January is the sixth day of the year in 2011. .",
            "url": "https://guapbeast.github.io/Trimester-1-Fast-Pages/2022/09/19/frq.html",
            "relUrl": "/2022/09/19/frq.html",
            "date": " • Sep 19, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "Iteration Mini-Lab",
            "content": "import java.util.*; public class Chickenegg { String[][] chicken = { { &quot; __// &quot;, &quot; /.__. &quot;, &quot; / / &quot;, &quot;&#39;__/ &quot;, &quot; - )&quot;, &quot; _____/ &quot;, &quot;____|_|____&quot;, &quot; &quot; &quot; &quot;, }, { &quot; // &quot;, &quot; ww_ ___./// &quot;, &quot;o__ `._.-&#39;&#39;&#39;&#39;&#39; // &quot;, &quot;|/ , / // &quot;, &quot; ``,,,&#39; _// &quot;, &quot; `-. --&#39; .&#39;`. &quot;, &quot; _/_/ `.,&#39; &quot;, &quot; &quot;, &quot; ,,&#39;,&#39;` &quot;, }, { &quot; __ &quot;, &quot; W._` ._&quot;, &quot; |/ `-._._._.-//&quot;, &quot; _ `.__.&#39; _//&quot;, &quot; `v&#39; _`-. --&#39; _&quot;, &quot; .^.`.. _/_/ &lt;&#39; -_// &quot;, &quot; .&#39; `. &#39;` // `-.-&#39;&quot;, &quot; &#39;`_&#39;` -&#39;` -&#39;` &#39;&#39; &quot;, &quot; &#39; `&quot; }, { &quot; ()&quot;, &quot; )) ((&quot;, &quot; // &quot;, &quot; | ____// |&quot;, &quot; ~/ ~ ~ /~~/&quot;, &quot;, &quot; / / ,|&quot;, &quot; (~~~)__.- |&quot;, &quot; ``~ |&quot;, &quot; | | |&quot;, } }; public void printText () { for (int count = 4; count &gt;= 1; count--) { System.out.println(&quot;Chicken&quot; + (count-1) + &quot; chicken n&quot;); } } } Chickenegg myText = new Chickenegg(); myText.printText(); . | &#34; /.__. &#34;, illegal escape character | &#34; / / &#34;, illegal escape character | &#34; / / &#34;, illegal escape character | &#34;&#39;__/ &#34;, illegal escape character | &#34; - )&#34;, illegal escape character | &#34; _____/ &#34;, illegal escape character .",
            "url": "https://guapbeast.github.io/Trimester-1-Fast-Pages/2022/09/18/frq1.html",
            "relUrl": "/2022/09/18/frq1.html",
            "date": " • Sep 18, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "My First Java Statement Post",
            "content": "GradeCalculator { public static void main(String[] args) { int percent=93; //calculates the grade received in AP Physics based on a percentage score earned in the class before the final trimester curve. if(percent&lt;50){ System.out.println(&quot;Sorry, didnt pass&quot;); } else if(percent&gt;=50 &amp;&amp; percent&lt;60){ System.out.println(&quot;You earned a D&quot;); } else if(percent&gt;=60 &amp;&amp; percent&lt;70){ System.out.println(&quot;You earned a C&quot;); } else if(percent&gt;=70 &amp;&amp; percent&lt;85){ System.out.println(&quot;You earned a B&quot;); } else if(percent&gt;=85 &amp;&amp; percent&lt;90){ System.out.println(&quot;You earned an A&quot;); }else if(percent&gt;=90 &amp;&amp; percent&lt;100){ System.out.println(&quot;You&#39;re the best!&quot;); }else if(percent=100){ System.out.println(&quot;You&#39;re too good!&quot;); }else{ System.out.println(&quot;Try again.&quot;); } } } . Else if statements provide another layer to if statements, running all of the conditional statements until one holds true (otherwise, if false, the code segment in the else statement will be ran) . You&#39;re the best! . If and else statements are boolean operators and help to specify if a conditions is either true or false, and runs segments of code based on which boolean operator holds true. . int percent = 25; if(percent&lt;50){ System.out.println(&quot;Sorry, didnt pass&quot;); } . Sorry, didnt pass . If loops run a condition based on a boolean condition; either true or false. Above, the code ran because the value percent held true. .",
            "url": "https://guapbeast.github.io/Trimester-1-Fast-Pages/jupyter/2022/09/10/java-statement.html",
            "relUrl": "/jupyter/2022/09/10/java-statement.html",
            "date": " • Sep 10, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "Human Stuff",
            "content": "Laurie Santos: Psychologie and the Good Life . People at Yale are overwhelmed and so busy that they’re triaging stuff. . Many students feel lonely and 80% say that they feel overwhelmed/stressed. . Studies show that Yale and other Ivy Leagues are not the exception and that many other college students who don&#39;t attend higher challenge colleges experience much the same symptoms. . Mental health is an increasingly dangerous crisis, especially for the younger generation that has to deal with the pressures and pitfalls of social media and living in the age of the internet. . Laurie Santos helps to teach students how to live a better, happier life, in the moment and be able to pursue their passions and interests, while also pursuing their educations and careers. . Laurie Santos worked at Yale and noticed that many people and students at Yale weren&#39;t happy or content with their lives. .",
            "url": "https://guapbeast.github.io/Trimester-1-Fast-Pages/jupyter/2022/09/10/human-stuff.html",
            "relUrl": "/jupyter/2022/09/10/human-stuff.html",
            "date": " • Sep 10, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "Calculator",
            "content": "class Main { public static void main(String[] args) { System.out.println(&quot;Enter two numbers&quot;); int first = 67; int second = 45; System.out.println(first + &quot; &quot; + second); // add two numbers int sum = first + second; System.out.println(&quot;The sum is: &quot; + sum); } } . The sum is: 112 .",
            "url": "https://guapbeast.github.io/Trimester-1-Fast-Pages/jupyter/2022/08/27/calculator.html",
            "relUrl": "/jupyter/2022/08/27/calculator.html",
            "date": " • Aug 27, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "CollegeBoard Notes Units 1 - 7",
            "content": "Ŕithwikh Várma . . Author Information . Name GitHub ID and Profile Tasks Scrum Board Commits Role . Ŕithwikh Várma | @guapbeast | Tasks | Scrum Board | Commits | Github Admin | . . Unit 1: Primitive Types . You’ll learn the fundamentals of Java, a programming language, as well as other foundational concepts for coding. . Unit 2: Using Objects . You’ll explore reference data as a way to represent real-world objects in a digital world and discover methods to perform more complex operations. . Unit 3: Boolean Expressions and if Statements . You’ll delve into the building blocks of algorithms and focus on using conditional statements to solve problems and control results. . Unit 4: Iteration . You’ll learn about iteration, another building block of algorithms that are for repetition. . Unit 5: Writing Classes . You’ll explore how real-world interactions can be expressed digitally by organizing behaviors and attributes into classes, and you’ll examine the legal and ethical implications of computer programming. . Unit 6: Array . You’ll learn techniques and standard algorithms to work with collections of related data, known as data structures. . Unit 7: ArrayList . You’ll delve deeper into data sets, exploring ArrayList objects for larger amounts of data, as well as the privacy concerns related to personal data storage. . Unit 8: 2D Array . Now that you’ve explored 1D arrays, you’ll branch out into 2D arrays and experiment with data sets represented in a table. . Unit 9: Inheritance . You’ll learn how to manipulate programming without altering existing code by using subclasses to create a hierarchy. . Unit 10: Recursion . You’ll work on solving larger problems by solving smaller, simpler versions of the same problem using recursive methods. .",
            "url": "https://guapbeast.github.io/Trimester-1-Fast-Pages/markdown/2022/08/27/CollegeBoard-notes-copy.html",
            "relUrl": "/markdown/2022/08/27/CollegeBoard-notes-copy.html",
            "date": " • Aug 27, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "Code.org Notes",
            "content": "Ŕithwikh Várma . . Author Information . Name GitHub ID and Profile Tasks Scrum Board Commits Role . Ŕithwikh Várma | @guapbeast | Tasks | Scrum Board | Commits | Github Admin | . . Lesson 1: Welcome to CSA . I learned about the key characteristics that it takes for success in the field of software engineering. . Lesson 2: Java Lab . I learned about actual Java syntax and how certain errors/typos in Java can result in a program that doesn’t work. I also learned about the different types of mistakes that result in syntax errors. . . Lesson 3: The Neighborhood . I learned that classes are blueprints that define the attributes and behaviors that an object can have. . . Lesson 4: Navigating and Painting . I learned the syntax for calling methods in Java to call methods. . . Lesson 5: One-Way Selection Statements . I learned how to use if statements in Java to maked decisions based on when a condition is either true or false . . Lesson 6: PainterPlus . I learned how to create a subclass to a superclass in Java. Subclasses have all of the attibutes of the Superclass. . . Lesson 7: Writing Methods . I learned how to use a new void method in order to increase a subclasses’ abilities and capabilities. Methods from a subclass cannot be accesssed in a superclass. . . Lesson 8: Code Reviews . It’s important to comment on code when reviewing it so that clear communication can be established between the author and the reviwer. . . Lesson 9: Loops . I learned about using while loops in order to execute a portion of code while the condition is true. . . Lesson 10: Two-Way Selection Statements . I learned how to efficiently use boolean statements in order to run portions of code based of of a condition. I also learned more aout the not operator and its uses. . . Lesson 11: Debugging Strategies . I learned to print information to the console as a debugging tool to identify logic errors in my programs. . Lesson 12: Decomposition and Design . I learned more about learning pseudocode and using decomposition and top-down design to deconstruct problems into smaller tasks and develop algorithms for tasks. . Lesson 13: PatternPainter . I learned about the use of special behaviors. I also learned about using algorithms to write methods. . Lesson 14: BackgroundPainter . I further practiced the use of decomposition and use of subclasses. . Lesson 15: Open Source Code . I learned about the real-world applications of computer science takeaways. .",
            "url": "https://guapbeast.github.io/Trimester-1-Fast-Pages/markdown/2022/08/27/CodeOrg-notes.html",
            "relUrl": "/markdown/2022/08/27/CodeOrg-notes.html",
            "date": " • Aug 27, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "The First Python Post",
            "content": "print(&quot;Hello World&quot;) . Hello World .",
            "url": "https://guapbeast.github.io/Trimester-1-Fast-Pages/jupyter/2022/08/21/python.html",
            "relUrl": "/jupyter/2022/08/21/python.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "My First Java Post",
            "content": "String greet = &quot;Hello World!&quot;; System.out.println(greet); System.out.println(&quot;Hello World&quot;); . Hello World! Hello World .",
            "url": "https://guapbeast.github.io/Trimester-1-Fast-Pages/jupyter/2022/08/21/java.html",
            "relUrl": "/jupyter/2022/08/21/java.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post31": {
            "title": "Bash Checks",
            "content": "conda list conda --version jupyter kernelspec list python2 --version python3 --version java --version javac --version . # packages in environment at /Users/rithwikhvarma/opt/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39hecd8cb5_1 aiohttp 3.8.1 py39hca72f7f_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39hecd8cb5_0 anaconda-navigator 2.1.4 py39hecd8cb5_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39hecd8cb5_0 appdirs 1.4.4 pyhd3eb1b0_0 applaunchservices 0.2.1 pyhd3eb1b0_0 appnope 0.1.2 py39hecd8cb5_1001 appscript 1.1.2 py39h9ed2024_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39hca72f7f_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39hecd8cb5_0 astropy 5.0.4 py39h67323c0_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.8.0 pypi_0 pypi bcrypt 3.2.0 py39h9ed2024_0 beautifulsoup4 4.11.1 py39hecd8cb5_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39hca72f7f_0 bkcharts 0.2 py39hecd8cb5_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h2842e9f_0 bokeh 2.4.2 py39hecd8cb5_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39h67323c0_0 brotli 1.0.9 hb1e8313_2 brotlipy 0.7.0 py39h9ed2024_1003 brunsli 0.1 h23ab428_0 bzip2 1.0.8 h1de35cc_0 c-ares 1.18.1 hca72f7f_0 ca-certificates 2022.3.29 hecd8cb5_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39hecd8cb5_2 cffi 1.15.0 py39hc55c11b_1 cfitsio 3.470 hee0f690_6 chardet 4.0.0 py39hecd8cb5_1003 charls 2.2.0 h23ab428_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39hecd8cb5_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39hecd8cb5_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.12.0 py39hecd8cb5_0 conda-build 3.21.8 py39hecd8cb5_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39hca72f7f_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39h2fd3fbb_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 hca72f7f_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39he9d5cce_0 cytoolz 0.11.0 py39h9ed2024_0 daal4py 2021.5.0 py39h24a4e90_0 dal 2021.5.0 hecd8cb5_782 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39hecd8cb5_1 debugpy 1.5.1 py39he9d5cce_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39hecd8cb5_1 entrypoints 0.4 py39hecd8cb5_0 et_xmlfile 1.1.0 py39hecd8cb5_0 executing 0.8.3 pyhd3eb1b0_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 hd8bbffd_0 frozenlist 1.2.0 py39hca72f7f_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39hecd8cb5_1 gensim 4.1.2 py39he9d5cce_0 giflib 5.2.1 haf1e3a3_0 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h23ab428_2 gmpy2 2.1.2 py39hd5de756_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h9ed2024_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39hecd8cb5_0 greenlet 1.1.1 py39h23ab428_0 grpcio 1.42.0 py39ha29bfda_0 h5py 3.6.0 py39h4a1dd59_0 hdf5 1.10.6 hdbbcd12_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 h0a44026_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39ha952a84_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39hecd8cb5_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39hecd8cb5_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 hecd8cb5_3538 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39hecd8cb5_0 ipython 8.2.0 py39hecd8cb5_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39hecd8cb5_1 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e hca72f7f_0 jq 1.6 h9ed2024_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39hecd8cb5_0 jupyter 1.0.0 py39hecd8cb5_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39hecd8cb5_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 haf1e3a3_2 keyring 23.4.0 py39hecd8cb5_0 kiwisolver 1.3.2 py39he9d5cce_0 krb5 1.19.2 hcd88c3b_0 lazy-object-proxy 1.6.0 py39h9ed2024_0 lcms2 2.12 hf1fd2bf_0 lerc 3.0 he9d5cce_0 libaec 1.0.4 hb1e8313_1 libarchive 3.4.2 haa3ed63_0 libcrc32c 1.1.1 hb1e8313_2 libcurl 7.82.0 h6dfd666_0 libcxx 12.0.0 h2f01273_0 libdeflate 1.8 h9ed2024_5 libedit 3.1.20210910 hca72f7f_0 libev 4.33 h9ed2024_1 libffi 3.3 hb1e8313_2 libgfortran 3.0.1 h93005f0_2 libiconv 1.16 hca72f7f_2 libidn2 2.3.2 h9ed2024_0 liblief 0.11.5 he9d5cce_1 libllvm11 11.1.0 h46f1229_1 libnghttp2 1.46.0 ha29bfda_0 libpng 1.6.37 ha441bb4_0 libprotobuf 3.19.1 h8346a28_0 libsodium 1.0.18 h1de35cc_0 libspatialindex 1.9.3 h23ab428_0 libssh2 1.10.0 h0a4fc7d_0 libtiff 4.2.0 h87d7836_0 libunistring 0.9.10 h9ed2024_0 libwebp 1.2.2 h56c3ce4_0 libwebp-base 1.2.2 hca72f7f_0 libxml2 2.9.12 hcdb78fc_0 libxslt 1.1.34 h83b36ba_0 libzopfli 1.0.3 hb1e8313_0 llvm-openmp 12.0.0 h0dcd299_1 llvmlite 0.38.0 py39h8346a28_0 locket 0.2.1 py39hecd8cb5_2 lxml 4.8.0 py39h65b224f_0 lz4-c 1.9.3 h23ab428_1 lzo 2.10 haf1e3a3_2 markdown 3.3.4 py39hecd8cb5_0 markupsafe 2.0.1 py39h9ed2024_0 matplotlib 3.5.1 py39hecd8cb5_1 matplotlib-base 3.5.1 py39hfb0c5b7_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39hecd8cb5_1 mistune 0.8.4 py39h9ed2024_1000 mkl 2021.4.0 hecd8cb5_637 mkl-service 2.4.0 py39h9ed2024_0 mkl_fft 1.3.1 py39h4ab4a9b_0 mkl_random 1.2.2 py39hb2f4e1b_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h6ef4df4_1 mpfr 4.0.2 h9066e36_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39hecd8cb5_0 msgpack-python 1.0.2 py39hf7b0b51_1 multidict 5.2.0 py39hca72f7f_2 multipledispatch 0.6.0 py39hecd8cb5_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39hecd8cb5_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39hecd8cb5_0 nbconvert 6.4.4 py39hecd8cb5_0 nbformat 5.3.0 py39hecd8cb5_0 ncurses 6.3 hca72f7f_2 nest-asyncio 1.5.5 py39hecd8cb5_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39hecd8cb5_0 numba 0.55.1 py39hae1ba45_0 numexpr 2.8.1 py39h2e5f0a9_0 numpy 1.21.5 py39h2e5f0a9_1 numpy-base 1.21.5 py39h3b1a694_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h9ed2024_0 openjpeg 2.4.0 h66ea3da_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n hca72f7f_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39he9d5cce_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39hecd8cb5_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39hecd8cb5_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 pathspec 0.7.0 py_0 patsy 0.5.2 py39hecd8cb5_1 pep8 1.7.1 py39hecd8cb5_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39hde71d04_0 pip 21.2.4 py39hecd8cb5_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39hecd8cb5_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39he9d5cce_0 psutil 5.8.0 py39h9ed2024_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39he9d5cce_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h9ed2024_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39hecd8cb5_0 pycurl 7.44.1 py39hbcfaee0_1 pydispatcher 2.0.5 py39hecd8cb5_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h9ed2024_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39hecd8cb5_0 pylint 2.9.6 py39hecd8cb5_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39he9d5cce_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h23ab428_6 pyrsistent 0.18.0 py39hca72f7f_0 pysocks 1.7.1 py39hecd8cb5_0 pytables 3.6.1 py39h648f197_1 pytest 7.1.1 py39hecd8cb5_0 python 3.9.12 hdfd78df_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h23ab428_3 python.app 3 py39hca72f7f_0 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39hca72f7f_0 pyyaml 6.0 py39hca72f7f_1 pyzmq 22.3.0 py39he9d5cce_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h468cd18_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39hecd8cb5_0 readline 8.1.2 hca72f7f_1 regex 2022.3.15 py39hca72f7f_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39hecd8cb5_1 ruamel_yaml 0.15.100 py39h9ed2024_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39hae1ba45_0 scikit-learn 1.0.2 py39hae1ba45_1 scikit-learn-intelex 2021.5.0 py39hecd8cb5_0 scipy 1.7.3 py39h8c7af03_0 scrapy 2.6.1 py39hecd8cb5_0 seaborn 0.11.2 pyhd3eb1b0_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39hecd8cb5_0 sip 4.19.13 py39h23ab428_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 he9d5cce_0 sniffio 1.2.0 py39hecd8cb5_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39hecd8cb5_1 spyder-kernels 2.1.3 py39hecd8cb5_0 sqlalchemy 1.4.32 py39hca72f7f_0 sqlite 3.38.2 h707629a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39hca72f7f_0 sympy 1.10.1 py39hecd8cb5_0 tabulate 0.8.9 py39hecd8cb5_0 tbb 2021.5.0 haf03e11_0 tbb4py 2021.5.0 py39haf03e11_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39hecd8cb5_0 terminado 0.13.1 py39hecd8cb5_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h7bc2e8c_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h9ed2024_0 tqdm 4.64.0 py39hecd8cb5_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39hca72f7f_0 typed-ast 1.4.3 py39h9ed2024_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39he9d5cce_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 haf1e3a3_0 urllib3 1.26.9 py39hecd8cb5_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h999c104_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39hecd8cb5_1 websocket-client 0.58.0 py39hecd8cb5_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h6dfd666_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39hecd8cb5_0 wrapt 1.12.1 py39h9ed2024_1 wurlitzer 3.0.2 py39hecd8cb5_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xlwings 0.24.9 py39hecd8cb5_0 xz 5.2.5 h1de35cc_0 yaml 0.2.5 haf1e3a3_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h9ed2024_0 zeromq 4.3.4 h23ab428_0 zfp 0.5.5 he9d5cce_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h4dc903c_2 zope 1.0 py39hecd8cb5_1 zope.interface 5.4.0 py39h9ed2024_0 zstd 1.4.9 h322a384_0 conda 4.12.0 Available kernels: python3100jvsc74a57bd0aee8b7b246df8f9039afb4144a1f6fd8d2ca17a180786b69acc140d282b71a49 /Users/rithwikhvarma/.vscode/extensions/ms-toolsai.jupyter-2022.7.1102252217/temp/jupyter/kernels/python3100jvsc74a57bd0aee8b7b246df8f9039afb4144a1f6fd8d2ca17a180786b69acc140d282b71a49 python3912jvsc74a57bd0470fc0dfe3862be9c7eeaf60eeb9eb02b6f77149a3c0b95a4ed8bee16abb4863 /Users/rithwikhvarma/.vscode/extensions/ms-toolsai.jupyter-2022.7.1102252217/temp/jupyter/kernels/python3912jvsc74a57bd0470fc0dfe3862be9c7eeaf60eeb9eb02b6f77149a3c0b95a4ed8bee16abb4863 bash /Users/rithwikhvarma/Library/Jupyter/kernels/bash java /Users/rithwikhvarma/Library/Jupyter/kernels/java python3 /Users/rithwikhvarma/opt/anaconda3/share/jupyter/kernels/python3 Python 2.7.18 Python 3.9.12 java 18.0.2.1 2022-08-18 Java(TM) SE Runtime Environment (build 18.0.2.1+1-1) Java HotSpot(TM) 64-Bit Server VM (build 18.0.2.1+1-1, mixed mode, sharing) javac 18.0.2.1 .",
            "url": "https://guapbeast.github.io/Trimester-1-Fast-Pages/jupyter/2022/08/21/bash-checks.html",
            "relUrl": "/jupyter/2022/08/21/bash-checks.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post32": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://guapbeast.github.io/Trimester-1-Fast-Pages/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post33": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://guapbeast.github.io/Trimester-1-Fast-Pages/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  
    
        ,"post34": {
            "title": "About Me",
            "content": "Ŕithwikh Várma . . Author Information . Name GitHub ID and Profile Tasks Scrum Board Commits Role . Ŕithwikh Várma | @guapbeast | Tasks | Scrum Board | Commits | Github Admin | . .",
            "url": "https://guapbeast.github.io/Trimester-1-Fast-Pages/markdown/2020/01/14/rithwikh-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/rithwikh-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "An AP Computer Science Advanced student at Del Norte High School. Guapbeast 1. . Cool name. &#8617; . |",
          "url": "https://guapbeast.github.io/Trimester-1-Fast-Pages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  

  

  
  

  
      ,"page13": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://guapbeast.github.io/Trimester-1-Fast-Pages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}